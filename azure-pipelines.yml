trigger:
  branches:
    include:
      - main
  paths:
    include:
      - /Azure_DevOps/Terraform/variables.tf
      - /Azure_DevOps/Terraform/main.tf

pool: Self-hosted

variables:
  - group: Terraform-BuildVariables
  # PROVIDE YOUR SUBSCRIPTION ID
  - name: subscription_id
    value: "<YOUR_SUBSCRIPTION_ID>"
  # PROVIDE YOUR APPLICATION ID
  - name: application_id
    value: "<YOUR_APPLICATION_ID>"
  # PROVIDE YOUR TENANT ID
  - name: tenant_id
    value: "<YOUR_TENANT_ID"
  - name: storage_accounts
    value: "sa01azuredevops"
  - name: blob_storage
    value: container01-azuredevops
  - name: state_file
    value: tfplan
  - name: sa-resource_group
    value: AzureDevOps

stages:
  - stage: Build
    jobs:
    - job: TerraformInitandPlan
      pool: Self-hosted
      steps:
      - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
        displayName: 'Install Terraform'
      - script: terraform version
        displayName: Terraform Version
      - script:  az login --service-principal -u $(application_id) -p $(spn-azuredevops-password) --tenant $(tenant_id)
        displayName: 'Log Into Azure'
      - script: terraform init -backend-config=resource_group_name=$(sa-resource_group) -backend-config="storage_account_name=$(storage_accounts)" -backend-config="container_name=$(blob_storage)" -backend-config="access_key=$(sa01-azdo-accesskey)" -backend-config="key=$(state_file)"
        displayName: "Terraform Init"
        workingDirectory: $(System.DefaultWorkingDirectory)/Azure_DevOps/Terraform
      - script: terraform plan -var="client_id=$(application_id)" -var="client_secret=$(spn-azuredevops-password)" -var="tenant_id=$(tenant_id)" -var="subscription_id=$(subscription_id)" -var="admin_password=$(vm-admin-password)" -out=tfplan
        displayName: Terraform Plan
        workingDirectory: $(System.DefaultWorkingDirectory)/Azure_DevOps/Terraform
      - task: ArchiveFiles@2
        displayName: 'Create Plan Artifact'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Azure_DevOps/Terraform'
          includeRootFolder: false
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
          replaceExistingArchive: true
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Plan Artifact'
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).tgz'
          artifactName: 'tfplan'

  - stage: Deploy
    jobs:
    - deployment: TerraformApply
      pool: Self-hosted
      workspace:
        clean: all # what to clean up before the job runs
      environment: dev
      strategy:                  
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                artifact: tfplan
                targetPath: '$(Pipeline.Workspace)/plan/'
            - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
              displayName: 'Install Terraform'
            - script: terraform version
              displayName: Terraform Version
            - task: ExtractFiles@1
              displayName: 'Extract Plan Artifact'
              inputs:
                archiveFilePatterns: '$(Pipeline.Workspace)/plan/$(Build.BuildNumber).tgz'
                destinationFolder: '$(System.DefaultWorkingDirectory)/Azure_DevOps/Terraform'
                cleanDestinationFolder: false
            - script: terraform apply tfplan
              displayName: 'Terraform Apply'
              workingDirectory: $(System.DefaultWorkingDirectory)/Azure_DevOps/Terraform
